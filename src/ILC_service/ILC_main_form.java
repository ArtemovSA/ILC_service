package ILC_service;

import ILC_service.Serial_port.Buf_class;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jssc.SerialPortList;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

/**
 *
 * @author user
 */

public class ILC_main_form extends javax.swing.JFrame {

    public byte DEBUG_WRITE_BURST = 0x01;       //Записать массив байт
    public byte DEBUG_WRITE_BYTE = 0x02;        //Записать байт
    public byte DEBUG_READ_BURST = 0x03;        //Читать массив байт
    public byte DEBUG_READ_BYTE = 0x04;         //Читать байт
    public byte DEBUG_WRITE_SCRIPT = 0x05;      //Записать скрипт в память
    public byte DEBUG_PREPARE_WRITE_SCRIPT =0x06;//Подготовить запись
    public byte DEBUG_START_SCRIPT = 0x07;      //Запустить скрипт
    public byte DEBUG_STOP_SCRIPT = 0x08;       //Остановить скрипт
    public byte DEBUG_PAUSE_SCRIPT = 0x09;      //Приостановить скрипт   
    public byte DEBUG_SD_WRITE_SCRIPT = 0x0A;   //Записать скрипт на sd карту

    public DefaultTableModel addrFlash_table; //Таблица адресации флеш
    public DefaultTableModel addrAll_table; //Таблица адресации
    public DefaultTableModel mainSettings_table; //Таблица настроек
    public DefaultTableModel burst_table; //Таблица данных
    
    String sFileName = "ILC.prop";
    public static Properties props = new Properties(); //Переменная настроек
    
    public DefaultListModel debug_List_files = new DefaultListModel();
    public DefaultComboBoxModel debug_List_libs = new DefaultComboBoxModel();
    public String debug_path = "D:\\JOB\\ARM\\IAR workspace\\IoT_Conroller_Gen_1\\TASKS\\TASK_SCRIPT\\conversion";
    public Path debug_path_var = Paths.get(debug_path);  
    public String debug_main_name;
    public String debug_current_file;
    
    //Настроечные переменные
    public long prp_fadr[] = new long[15];
    public long prp_alladr[] = new long[10];
    public String prp_com_name;
    public String prp_com_speed;    
    
    //Serial port 
    public Serial_port port;
    public ILC_protocol protocol;
    
    
    /**
     * Creates new form ILC_main_form
     */
    public ILC_main_form() {
        initComponents();
        start_load_settings(); //Загрузка свойств
        ILC_init_params(); //Инициализация параметров
    }
    
    //Загрузка свойств
    private void start_load_settings() {
        
        //Настроить подсветку синтаксиса
        rSyntaxTextArea_debug.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_PYTHON);
        
        try {
            FileInputStream properties = new FileInputStream(sFileName);
            props.load(properties);
            properties.close();
            
            //Получить настройки порта
            prp_com_name = props.getProperty("COM_NAME");
            prp_com_speed = props.getProperty("COM_SPEED");
            
        } catch (IOException ex) {
            
        }catch (NumberFormatException e) {
            
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox_dev = new javax.swing.JComboBox<>();
        jComboBox_actions = new javax.swing.JComboBox<>();
        jComboBox_source = new javax.swing.JComboBox<>();
        jComboBox_data_type = new javax.swing.JComboBox<>();
        jFileChooser_file = new javax.swing.JFileChooser();
        buttonGroup_debug_gener = new javax.swing.ButtonGroup();
        buttonGroup_debug_lib = new javax.swing.ButtonGroup();
        jPanel_terminal = new javax.swing.JPanel();
        jButton_term_send = new javax.swing.JButton();
        jTextField_term_in = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_term_out = new javax.swing.JTextArea();
        jButton_terminal_clear = new javax.swing.JButton();
        jTabbedPane_tabs = new javax.swing.JTabbedPane();
        jPanel_connect = new javax.swing.JPanel();
        jComboBox_comPort = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox_comPortSpeed = new javax.swing.JComboBox<>();
        jButton_comConnect = new javax.swing.JButton();
        jButton_comDisconnect = new javax.swing.JButton();
        jButton_safe_settings = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jButton_checkConn = new javax.swing.JButton();
        jPanel_PD = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextField_block = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField_page = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField_offset = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField_count_bytes = new javax.swing.JTextField();
        jButton_burst_clear = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jButton_burst_read = new javax.swing.JButton();
        jButton_burst_write = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_burst = new javax.swing.JTable();
        jButton_burst_set_val = new javax.swing.JButton();
        jTextField_set_val = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel_param_main = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_main_params = new javax.swing.JTable();
        jButton_read_main_params = new javax.swing.JButton();
        jButton_write_main_params = new javax.swing.JButton();
        jButton_settings_save = new javax.swing.JButton();
        jButton_settings_open = new javax.swing.JButton();
        jPanel_debug = new javax.swing.JPanel();
        jPanel_script = new javax.swing.JPanel();
        rTextScrollPane_debug = new org.fife.ui.rtextarea.RTextScrollPane();
        rSyntaxTextArea_debug = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        jButton_flashcopy = new javax.swing.JButton();
        jButton_start_code = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton_debug_open = new javax.swing.JButton();
        jButton_debug_save = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton_debug_compile = new javax.swing.JButton();
        jComboBox_debug_libs = new javax.swing.JComboBox<>();
        jPanel24 = new javax.swing.JPanel();
        jRadioButton_debug_c = new javax.swing.JRadioButton();
        jRadioButton_debug_bin = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton_debug_stdLib = new javax.swing.JRadioButton();
        jRadioButton_debug_userLib = new javax.swing.JRadioButton();
        jComboBox__debug_memPlace = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jList_debug_files = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jButton_debug_addFile = new javax.swing.JButton();
        jButton_debug_delFile = new javax.swing.JButton();
        jButton_debug_addLibraries = new javax.swing.JButton();
        jButton_debug_clearList = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton_debug_main = new javax.swing.JButton();
        jButton_debug_SDcopy = new javax.swing.JButton();
        jButton_debug_libSave = new javax.swing.JButton();
        jComboBox_debug_flashPos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton_debug_add_current = new javax.swing.JButton();

        jComboBox_dev.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_devItemStateChanged(evt);
            }
        });

        jComboBox_data_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "uint8_t", "uint16_t", "char" }));
        jComboBox_data_type.setSelectedIndex(-1);
        jComboBox_data_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_data_typeItemStateChanged(evt);
            }
        });

        jFileChooser_file.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser_fileActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Сервисная программа Immo");

        jPanel_terminal.setBorder(javax.swing.BorderFactory.createTitledBorder("Терминал"));

        jButton_term_send.setText("Отправить");
        jButton_term_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_term_sendActionPerformed(evt);
            }
        });

        jTextField_term_in.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_term_inMouseClicked(evt);
            }
        });

        jTextArea_term_out.setColumns(20);
        jTextArea_term_out.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 10)); // NOI18N
        jTextArea_term_out.setRows(5);
        jScrollPane1.setViewportView(jTextArea_term_out);

        jButton_terminal_clear.setText("Очистить");
        jButton_terminal_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_terminal_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_terminalLayout = new javax.swing.GroupLayout(jPanel_terminal);
        jPanel_terminal.setLayout(jPanel_terminalLayout);
        jPanel_terminalLayout.setHorizontalGroup(
            jPanel_terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_terminalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel_terminalLayout.createSequentialGroup()
                        .addComponent(jTextField_term_in)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_terminal_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_term_send)))
                .addContainerGap())
        );
        jPanel_terminalLayout.setVerticalGroup(
            jPanel_terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_terminalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_terminalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_term_send)
                    .addComponent(jTextField_term_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_terminal_clear))
                .addContainerGap())
        );

        jTabbedPane_tabs.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jComboBox_comPort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM70" }));
        jComboBox_comPort.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_comPortMouseClicked(evt);
            }
        });

        jLabel14.setText("COM порт");

        jLabel15.setText("Скорость");

        jComboBox_comPortSpeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "460800", "230400", "115200", "9600" }));
        jComboBox_comPortSpeed.setSelectedIndex(2);
        jComboBox_comPortSpeed.setToolTipText("");

        jButton_comConnect.setText("Подлючить");
        jButton_comConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_comConnectActionPerformed(evt);
            }
        });

        jButton_comDisconnect.setText("Отключить");
        jButton_comDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_comDisconnectActionPerformed(evt);
            }
        });

        jButton_safe_settings.setText("Сохранить");
        jButton_safe_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_safe_settingsActionPerformed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Управление"));
        jPanel12.setToolTipText("");

        jButton_checkConn.setText("Проверка связи");
        jButton_checkConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_checkConnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_checkConn, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_checkConn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(323, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_connectLayout = new javax.swing.GroupLayout(jPanel_connect);
        jPanel_connect.setLayout(jPanel_connectLayout);
        jPanel_connectLayout.setHorizontalGroup(
            jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_connectLayout.createSequentialGroup()
                        .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox_comPort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox_comPortSpeed, 0, 106, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_comConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_safe_settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_comDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 641, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_connectLayout.setVerticalGroup(
            jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_comConnect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(jComboBox_comPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_comDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_connectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jComboBox_comPortSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_safe_settings))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        jTabbedPane_tabs.addTab("Порт", jPanel_connect);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Адресация"));

        jTextField_block.setText("0");

        jLabel21.setText("Block");

        jTextField_page.setText("0");

        jLabel22.setText("Page");

        jLabel23.setText("Offset");

        jTextField_offset.setText("0");

        jLabel17.setText("Количество байт");

        jTextField_count_bytes.setText("100");
        jTextField_count_bytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_count_bytesActionPerformed(evt);
            }
        });

        jButton_burst_clear.setText("Очистить");
        jButton_burst_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_burst_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_block, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_page, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_offset, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_count_bytes, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_burst_clear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_block, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField_page, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField_offset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel17)
                    .addComponent(jTextField_count_bytes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_burst_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Чтени и запись массива"));

        jButton_burst_read.setText("Читать");
        jButton_burst_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_burst_readActionPerformed(evt);
            }
        });

        jButton_burst_write.setText("Писать");
        jButton_burst_write.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_burst_writeActionPerformed(evt);
            }
        });

        jTable_burst.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Offset", "Значение", "Символ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable_burst);

        jButton_burst_set_val.setText("Установить");
        jButton_burst_set_val.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_burst_set_valActionPerformed(evt);
            }
        });

        jTextField_set_val.setText("0x00");

        jLabel20.setText("Значение");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_set_val, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_burst_set_val)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_burst_write)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_burst_read))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_set_val)
                            .addComponent(jLabel20)
                            .addComponent(jButton_burst_set_val, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_burst_read, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_burst_write, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout jPanel_PDLayout = new javax.swing.GroupLayout(jPanel_PD);
        jPanel_PD.setLayout(jPanel_PDLayout);
        jPanel_PDLayout.setHorizontalGroup(
            jPanel_PDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_PDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_PDLayout.setVerticalGroup(
            jPanel_PDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane_tabs.addTab("ILC протокол", jPanel_PD);

        jTable_main_params.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"SERIAL_NUM", "0x1111", "uint16_t", "2", "0x0000"},
                {"VERSION_HW", "1.1", "char", "5", "0x0000"},
                {"VERSION_SW", "1.1", "char", "5", "0x0000"},
                {"VERSION_RF", "1.0", "char", "5", "0x0000"},
                {"MASTER_NAME", "Sergey", "char", "15", "0x0000"},
                {"MASTER_SURNAME", "Artemov", "char", "15", "0x0000"},
                {"CAR_MODEL", "Lada", "char", "15", "0x0000"},
                {"AES_KEY", "0xFF", "uint8_t", "1", "0x0000"},
                {"RF_ADDRESS", "0x01", "uint8_t", "1", "0x0000"},
                {"RF_CHANNEL", "0x01", "uint8_t", "1", "0x0000"},
                {"RF_POWER", "0x00", "uint8_t", "1", "0x0000"},
                {"SMS_LOGIN", "111", "char", "10", "0x0000"},
                {"SMS_PASS", "111", "char", "10", "0x0000"},
                {"LEN_PHONE_LIST", "0x00", "uint8_t", "1", "0x0000"},
                {"LEN_ACTIONS_LIST", "0x00", "uint8_t", "1", "0x0000"},
                {"LEN_SMS_COMMANDS", "0x00", "uint8_t", "1", "0x0000"},
                {"LEN_RF_MODULES", "0x00", "uint8_t", "1", "0x0000"},
                {"LEN_TEMP_SENSORS", "0x00", "uint8_t", "1", "0x0000"}
            },
            new String [] {
                "Параметр", "Значение", "Тип", "Длина байт", "Адрес"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable_main_params);

        jButton_read_main_params.setText("Считать");
        jButton_read_main_params.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_read_main_paramsActionPerformed(evt);
            }
        });

        jButton_write_main_params.setText("Записать");
        jButton_write_main_params.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_write_main_paramsActionPerformed(evt);
            }
        });

        jButton_settings_save.setText("Сохранить");
        jButton_settings_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_settings_saveActionPerformed(evt);
            }
        });

        jButton_settings_open.setText("Открыть");
        jButton_settings_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_settings_openActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_param_mainLayout = new javax.swing.GroupLayout(jPanel_param_main);
        jPanel_param_main.setLayout(jPanel_param_mainLayout);
        jPanel_param_mainLayout.setHorizontalGroup(
            jPanel_param_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_param_mainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_param_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_param_mainLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton_settings_save, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_settings_open, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_read_main_params, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_write_main_params))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_param_mainLayout.setVerticalGroup(
            jPanel_param_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_param_mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_param_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_read_main_params, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_param_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_write_main_params, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_settings_save, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_settings_open, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane_tabs.addTab("Параметры", jPanel_param_main);

        jPanel_script.setBorder(javax.swing.BorderFactory.createTitledBorder("Текст скрипта"));

        rTextScrollPane_debug.setAutoscrolls(true);
        rTextScrollPane_debug.setLineNumbersEnabled(true);

        rSyntaxTextArea_debug.setColumns(20);
        rSyntaxTextArea_debug.setRows(5);
        rTextScrollPane_debug.setViewportView(rSyntaxTextArea_debug);

        javax.swing.GroupLayout jPanel_scriptLayout = new javax.swing.GroupLayout(jPanel_script);
        jPanel_script.setLayout(jPanel_scriptLayout);
        jPanel_scriptLayout.setHorizontalGroup(
            jPanel_scriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_scriptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rTextScrollPane_debug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_scriptLayout.setVerticalGroup(
            jPanel_scriptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_scriptLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rTextScrollPane_debug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton_flashcopy.setText("Копировать на FLASH");
        jButton_flashcopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_flashcopyActionPerformed(evt);
            }
        });

        jButton_start_code.setText("Запустить");
        jButton_start_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_start_codeActionPerformed(evt);
            }
        });

        jButton5.setText("Приостановить");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton_debug_open.setText("Открыть");
        jButton_debug_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_openActionPerformed(evt);
            }
        });

        jButton_debug_save.setText("Сохранить как");
        jButton_debug_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_saveActionPerformed(evt);
            }
        });

        jButton9.setText("Остановить");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton_debug_compile.setText("Компилировать");
        jButton_debug_compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_compileActionPerformed(evt);
            }
        });

        jComboBox_debug_libs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_debug_libsActionPerformed(evt);
            }
        });

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Опции"));

        buttonGroup_debug_gener.add(jRadioButton_debug_c);
        jRadioButton_debug_c.setSelected(true);
        jRadioButton_debug_c.setText("Си файл");

        buttonGroup_debug_gener.add(jRadioButton_debug_bin);
        jRadioButton_debug_bin.setText("BIN файл");

        jLabel3.setText("Генерировать:");

        jLabel4.setText("Сохранять Native:");

        buttonGroup_debug_lib.add(jRadioButton_debug_stdLib);
        jRadioButton_debug_stdLib.setText("Std library");

        buttonGroup_debug_lib.add(jRadioButton_debug_userLib);
        jRadioButton_debug_userLib.setSelected(true);
        jRadioButton_debug_userLib.setText("User library");

        jComboBox__debug_memPlace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ram", "flash", "extern", "sd_card" }));
        jComboBox__debug_memPlace.setSelectedIndex(1);

        jLabel5.setText("Память хранения");

        jList_debug_files.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_debug_filesMouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(jList_debug_files);

        jLabel6.setText("Список файлов:");

        jButton_debug_addFile.setText("Добавить");
        jButton_debug_addFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_addFileActionPerformed(evt);
            }
        });

        jButton_debug_delFile.setText("Убрать");
        jButton_debug_delFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_delFileActionPerformed(evt);
            }
        });

        jButton_debug_addLibraries.setText("Библиотеки");
        jButton_debug_addLibraries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_addLibrariesActionPerformed(evt);
            }
        });

        jButton_debug_clearList.setText("Очистить");
        jButton_debug_clearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_clearListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jRadioButton_debug_stdLib)
                            .addComponent(jRadioButton_debug_userLib)
                            .addComponent(jRadioButton_debug_bin)
                            .addComponent(jRadioButton_debug_c)
                            .addComponent(jLabel6)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox__debug_memPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton_debug_clearList, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jButton_debug_delFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_addFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jButton_debug_addLibraries, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)))))
                .addGap(2, 2, 2))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_debug_bin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_debug_c, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_debug_stdLib, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_debug_userLib, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox__debug_memPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_debug_addLibraries)
                    .addComponent(jButton_debug_clearList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_debug_addFile)
                    .addComponent(jButton_debug_delFile))
                .addContainerGap())
        );

        jLabel7.setText("Библиотеки");

        jButton_debug_main.setText("Исходный текст");
        jButton_debug_main.setEnabled(false);
        jButton_debug_main.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_mainActionPerformed(evt);
            }
        });

        jButton_debug_SDcopy.setText("Копировать на SD");
        jButton_debug_SDcopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_SDcopyActionPerformed(evt);
            }
        });

        jButton_debug_libSave.setText("Сохранить");
        jButton_debug_libSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_libSaveActionPerformed(evt);
            }
        });

        jComboBox_debug_flashPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));

        jLabel2.setText("Ячейка");

        jButton_debug_add_current.setText("Добавить текущий");
        jButton_debug_add_current.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_debug_add_currentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_debugLayout = new javax.swing.GroupLayout(jPanel_debug);
        jPanel_debug.setLayout(jPanel_debugLayout);
        jPanel_debugLayout.setHorizontalGroup(
            jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_debugLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_debugLayout.createSequentialGroup()
                        .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_debugLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_debug_libs, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(169, 169, 169)
                                .addComponent(jButton_debug_main)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_add_current)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_start_code, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_debugLayout.createSequentialGroup()
                                .addComponent(jButton_debug_save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_libSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_open, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_debug_flashPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_flashcopy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_SDcopy, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_debug_compile, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel_debugLayout.createSequentialGroup()
                        .addComponent(jPanel_script, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel_debugLayout.setVerticalGroup(
            jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_debugLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_start_code, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jButton_debug_main, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_debug_add_current, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox_debug_libs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel_script, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_debugLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_debug_save, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_debug_open, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_flashcopy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_debug_SDcopy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_debug_compile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_debug_libSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_debug_flashPos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(15, 15, 15))
        );

        jTabbedPane_tabs.addTab("Python", jPanel_debug);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_terminal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane_tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane_tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_terminal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane_tabs.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Отправка из терминала
    private void jButton_term_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_term_sendActionPerformed
        
    }//GEN-LAST:event_jButton_term_sendActionPerformed
    
    //Очистить окно терминала
    private void jButton_terminal_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_terminal_clearActionPerformed
        jTextArea_term_out.setText("");
    }//GEN-LAST:event_jButton_terminal_clearActionPerformed

    //Нажатие на текст
    private void jTextField_term_inMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_term_inMouseClicked
        jTextField_term_in.selectAll();
    }//GEN-LAST:event_jTextField_term_inMouseClicked

    //Записать основные параметры
    private void jButton_write_main_paramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_write_main_paramsActionPerformed

    }//GEN-LAST:event_jButton_write_main_paramsActionPerformed

    //Считать основные параметры
    private void jButton_read_main_paramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_read_main_paramsActionPerformed

    }//GEN-LAST:event_jButton_read_main_paramsActionPerformed

    private void jButton_burst_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_burst_clearActionPerformed
        burst_table.setRowCount(0);
    }//GEN-LAST:event_jButton_burst_clearActionPerformed

    private void jButton_burst_set_valActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_burst_set_valActionPerformed
        int[] row_indexes=jTable_burst.getSelectedRows();
        for(int i=0;i<row_indexes.length;i++){
            burst_table.setValueAt(jTextField_set_val.getText(), row_indexes[i], 1);
        }
    }//GEN-LAST:event_jButton_burst_set_valActionPerformed

    //Записать массив данных
    private void jButton_burst_writeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_burst_writeActionPerformed
        int block = Integer.parseInt(jTextField_block.getText());
        int page = Integer.parseInt(jTextField_page.getText());
        int offset = Integer.parseInt(jTextField_offset.getText());
        int len = Integer.parseInt(jTextField_count_bytes.getText());
        byte[] data = new byte[256];
        
        if (offset > 2048) {
            terminalAddStr("Max offset 2048");
            return;
        }
        
        if (page > 64) {
            terminalAddStr("Max page count 64");
            return;
        }
        
        if (block > 1024) {
            terminalAddStr("Max block count 1024");
            return;
        }

        if (len == 0) {
            terminalAddStr("Len zero value");
            return;
        }

        if (len > 256) {
            terminalAddStr("Max pack 256 bytes");
            return;
        }
        
        if (len > burst_table.getRowCount())
        {
            terminalAddStr("Len to write more then row count");
            return;
        }
        
        //Записать массив
        for (int i=0; i<len; i++) {
            data[i] = (byte) StrHexToLong(burst_table.getValueAt(i, 1).toString());
        }
        
        Buf_class retVal = protocol.writeNandData(block, page, offset, data, len);
        
        if (retVal.recived == true) {
            if (retVal.retStatus == ILC_protocol.USBC_RET_OK) {
                terminalAddStr("Write data OK");
            } else {
                terminalAddStr("Write data ERROR");
            }
        } else {
            terminalAddStr("ERROR I/O");
        }
    }//GEN-LAST:event_jButton_burst_writeActionPerformed

    private void jTextField_count_bytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_count_bytesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_count_bytesActionPerformed

    //Читать массив
    private void jButton_burst_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_burst_readActionPerformed
        burst_table.setRowCount(0);
        
        int block = Integer.parseInt(jTextField_block.getText());
        int page = Integer.parseInt(jTextField_page.getText());
        int offset = Integer.parseInt(jTextField_offset.getText());
        int len = Integer.parseInt(jTextField_count_bytes.getText());

        if (offset > 2048) {
            terminalAddStr("Max offset 2048");
            return;
        }
        
        if (page > 64) {
            terminalAddStr("Max page count 64");
            return;
        }
        
        if (block > 1024) {
            terminalAddStr("Max block count 1024");
            return;
        }

        if (len == 0) {
            terminalAddStr("Len zero value");
            return;
        }

        if (len > 256) {
            terminalAddStr("Max pack 256 bytes");
            return;
        }

        Buf_class retVal = protocol.readNandData(block, page, offset, len);

        if (retVal.recived == true) {
            if (retVal.retStatus == ILC_protocol.USBC_RET_OK) {
                burst_table.setRowCount(retVal.retLen);
                for (int i = 0; i < retVal.retLen; i++) {
                    
                    burst_table.setValueAt(offset + i, i, 0);
                    StringBuilder sb_val = new StringBuilder();
                    sb_val.append(String.format("0x%02X", retVal.retData[i]));
                    burst_table.setValueAt(sb_val, i, 1);
                    burst_table.setValueAt((char)retVal.retData[i], i, 2);
                }
                terminalAddStr("Read data OK");
            }else{
                terminalAddStr("Recived data ERROR");
            }
        } else {
            terminalAddStr("ERROR I/O");
        }
    }//GEN-LAST:event_jButton_burst_readActionPerformed

    //Сохранить настройки COM порта
    private void jButton_safe_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_safe_settingsActionPerformed
        try {
            FileOutputStream output;
            props.setProperty("COM_NAME", jComboBox_comPort.getSelectedItem().toString());
            props.setProperty("COM_SPEED", jComboBox_comPortSpeed.getSelectedItem().toString());
            output = new FileOutputStream(sFileName);
            props.store(output, "Saved settings");
            output.close();
            terminalAddStr("Настройки сохранены");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
            terminalAddStr("Файл не найден");
        } catch (IOException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
            terminalAddStr("Ошибка ввода/вывода");
        }
    }//GEN-LAST:event_jButton_safe_settingsActionPerformed

    //Отключение от COM порта
    private void jButton_comDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_comDisconnectActionPerformed
        if (port.closeCOMPort()) {
            jButton_comConnect.setBackground(Color.ORANGE);
            terminalAddStr("Порт закрыт");
        }else{
            jButton_comConnect.setBackground(Color.red);
        }
    }//GEN-LAST:event_jButton_comDisconnectActionPerformed

    //Подключение к COM порту
    private void jButton_comConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_comConnectActionPerformed
        if (port.openCOMPort(String.valueOf(jComboBox_comPort.getSelectedItem()),Integer.valueOf(jComboBox_comPortSpeed.getSelectedItem().toString()))) {
            jButton_comConnect.setBackground(Color.green);
            terminalAddStr("Порт подключен");
        } else {
            jButton_comConnect.setBackground(Color.red);
            terminalAddStr("Порт не подключен");
        }
    }//GEN-LAST:event_jButton_comConnectActionPerformed

    //Выбор типа
    private void jComboBox_data_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_data_typeItemStateChanged
        String arg = "";
        String len = "";
        switch (jComboBox_data_type.getSelectedItem().toString()){
            case "uint8_t":
                arg = "0x00";
                len = "1";
                break;
            case "uint16_t":
                arg = "0x0000";
                len = "2";
                break;
            case "char":
                arg = "";
                len = "-1";
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jComboBox_data_typeItemStateChanged

    //Выбор устройства
    private void jComboBox_devItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_devItemStateChanged

    }//GEN-LAST:event_jComboBox_devItemStateChanged

   
    private void loadTable(File file, DefaultTableModel table_model) {
        try {
            ObjectInputStream in = new ObjectInputStream(
            new FileInputStream(file));
            Vector rowData = (Vector)in.readObject();
            Iterator itr = rowData.iterator();
            table_model.setRowCount(0);
            while(itr.hasNext()) {
                table_model.addRow((Vector) itr.next());
            }
            in.close();
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void saveTable(File file, DefaultTableModel table_model) {
        try {
            ObjectOutputStream out = new ObjectOutputStream(
                    new FileOutputStream(file));
                out.writeObject(table_model.getDataVector());
                out.close();
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
    }
    
    private void jFileChooser_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser_fileActionPerformed
        
    }//GEN-LAST:event_jFileChooser_fileActionPerformed

    //Сохранить основные настройки в файл
    private void jButton_settings_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_settings_saveActionPerformed
        int ret = jFileChooser_file.showDialog(null, "Сохранить файл");  
        if (ret == jFileChooser_file.APPROVE_OPTION) {
            File save_file = jFileChooser_file.getSelectedFile();
            saveTable(save_file, mainSettings_table);
        }
    }//GEN-LAST:event_jButton_settings_saveActionPerformed

    //Открыть настройки из файла
    private void jButton_settings_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_settings_openActionPerformed
        int ret = jFileChooser_file.showDialog(null, "Открыть файл");                
        if (ret == jFileChooser_file.APPROVE_OPTION) {
            File save_file = jFileChooser_file.getSelectedFile();
            loadTable(save_file, mainSettings_table);
        }
    }//GEN-LAST:event_jButton_settings_openActionPerformed

    private void jComboBox_comPortMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_comPortMouseClicked
        refrash_COM_list();
    }//GEN-LAST:event_jComboBox_comPortMouseClicked

    private void jButton_debug_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_saveActionPerformed
        jFileChooser_file.setCurrentDirectory(new File(debug_path));
        int ret = jFileChooser_file.showDialog(null, "Сохранить файл");  
        if (ret == jFileChooser_file.APPROVE_OPTION) {
            File save_file = jFileChooser_file.getSelectedFile();
            try {
                Files.write( save_file.toPath(), rSyntaxTextArea_debug.getText().getBytes(), StandardOpenOption.CREATE);
            } catch (IOException ex) {
                Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_debug_saveActionPerformed

    private void jButton_debug_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_openActionPerformed
        jFileChooser_file.setCurrentDirectory(new File(debug_path));
        int ret = jFileChooser_file.showDialog(null, "Открыть файл");                
        if (ret == jFileChooser_file.APPROVE_OPTION) {
            File open_file = jFileChooser_file.getSelectedFile();
            try {
                String str = new String(Files.readAllBytes(open_file.toPath()));
                rSyntaxTextArea_debug.setText(str);
                debug_main_name = open_file.getName();
                debug_current_file = debug_main_name;
                jButton_debug_main.setEnabled(true);
                terminalAddStr("Файл "+debug_current_file+" открыт\n\r");
            } catch (IOException ex) {
                Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_debug_openActionPerformed

    private void jButton_debug_compileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_compileActionPerformed
        int expect = 0;
        String file_name;
        
        try {   
            Path path = Paths.get(debug_path+"\\"+debug_current_file);
            File file = new File(path.toString());
            Files.deleteIfExists(path);
            Files.write(path, rSyntaxTextArea_debug.getText().getBytes(), StandardOpenOption.CREATE);
            
            String command = "python pmImgCreator.py -f pmfeatures.py";
            if (jRadioButton_debug_bin.isSelected()){
                command += " -b";
            }else{
                command += " -c";
            }
            if (jRadioButton_debug_stdLib.isSelected()){
                command += " -s --native-file=inc/py_std_native.c";
            }else{
                command += " -u --native-file=inc/py_usr_native.c";
            }
            command += " --memspace="+jComboBox__debug_memPlace.getSelectedItem().toString()+" -o ";
            if (jRadioButton_debug_bin.isSelected()){
                if (jRadioButton_debug_stdLib.isSelected()){
                    file_name = "bin/py_std.bin";
                }else{
                    file_name = "bin/py_usr.bin";
                }
            }else{
                if (jRadioButton_debug_stdLib.isSelected()){
                    file_name = "inc/py_std.h";
                }else{
                    file_name = "inc/py_usr.h";
                }
            }
            command += file_name;
            
            for (int i =0; i<debug_List_files.getSize(); i++) {
                command += " "+debug_List_files.get(i);
            }

            String[] commands = {"cmd.exe","/c","cd \""+debug_path+"\"&& "+command};
            Runtime rt = Runtime.getRuntime();
            Process proc = rt.exec(commands);
            proc.waitFor();
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            OutputStream out = proc.getOutputStream();
            
            out.write(command.getBytes());
            
            
            String s = null;
            while ((s = stdInput.readLine()) != null) {
                terminalAddStr(s+"\n");
                expect = 1;
            }
            BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
            while ((s = stdError.readLine()) != null) {
                terminalAddStr(s+"\n");
                expect = 1;
            }
            if (expect != 1) {
                long size = Files.size(Paths.get(debug_path+"\\"+file_name));
                terminalAddStr("Прошивка скомпилирована. Размер: "+String.valueOf(size)+" байта\n\r");
            }
        } catch (IOException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton_debug_compileActionPerformed

    private void jButton_debug_addFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_addFileActionPerformed
        jFileChooser_file.setCurrentDirectory(new File(debug_path));
        int ret = jFileChooser_file.showDialog(null, "Добавить файл"); 
        if (ret == jFileChooser_file.APPROVE_OPTION) {
            File open_file = jFileChooser_file.getSelectedFile();
            Path abs_path = Paths.get(open_file.getPath());
            abs_path = debug_path_var.relativize(abs_path);
            debug_List_files.addElement(abs_path.toString());
        }
    }//GEN-LAST:event_jButton_debug_addFileActionPerformed

    private void jButton_debug_delFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_delFileActionPerformed
        debug_List_files.remove(jList_debug_files.getSelectedIndex());
    }//GEN-LAST:event_jButton_debug_delFileActionPerformed

    
    
    private void jButton_debug_mainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_mainActionPerformed
        try {
            debug_current_file = debug_main_name;
            Path path = Paths.get(debug_path+"\\"+debug_current_file);
            String str = new String(Files.readAllBytes(path));
            rSyntaxTextArea_debug.setText(str);
        } catch (IOException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_debug_mainActionPerformed

    private void jButton_debug_libSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_libSaveActionPerformed
        try {
            Path path = Paths.get(debug_path+"\\"+debug_current_file);
            Files.deleteIfExists(path);
            Files.write(path, rSyntaxTextArea_debug.getText().getBytes(), StandardOpenOption.CREATE);
            terminalAddStr("Файл "+debug_current_file+" сохранен\n\r");
        } catch (IOException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_jButton_debug_libSaveActionPerformed

    private void jButton_flashcopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_flashcopyActionPerformed
        
    }//GEN-LAST:event_jButton_flashcopyActionPerformed

    private void jButton_start_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_start_codeActionPerformed
       
    }//GEN-LAST:event_jButton_start_codeActionPerformed

    private void jButton_debug_addLibrariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_addLibrariesActionPerformed
        File []fList;
        File F = new File(debug_path+"//Modules");
        fList = F.listFiles();
        debug_List_files.removeAllElements();
        
        Path abs_path = null;
        
        for(int i=0; i<fList.length; i++) {
            if(fList[i].isFile())
                abs_path = Paths.get(fList[i].getPath());
                abs_path = debug_path_var.relativize(abs_path);
                debug_List_files.addElement(abs_path.toString());
        }
    }//GEN-LAST:event_jButton_debug_addLibrariesActionPerformed

    private void jButton_debug_clearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_clearListActionPerformed
        debug_List_files.removeAllElements();
    }//GEN-LAST:event_jButton_debug_clearListActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton_debug_add_currentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_add_currentActionPerformed
        debug_List_files.addElement(debug_current_file);
    }//GEN-LAST:event_jButton_debug_add_currentActionPerformed

    private void jComboBox_debug_libsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_debug_libsActionPerformed
        try {
            debug_current_file = "\\Modules\\"+jComboBox_debug_libs.getSelectedItem().toString();
            Path path = Paths.get(debug_path+debug_current_file);
            String str = new String(Files.readAllBytes(path));
            rSyntaxTextArea_debug.setText(str);  
        } catch (IOException ex) {
            Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox_debug_libsActionPerformed

    private void jButton_debug_SDcopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_debug_SDcopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_debug_SDcopyActionPerformed

    private void jList_debug_filesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_debug_filesMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                String sel_name = jList_debug_files.getModel().getElementAt(jList_debug_files.getSelectedIndex()).toString();
                debug_current_file = sel_name;
                File F = new File(debug_path+"\\"+sel_name);
                String str = new String(Files.readAllBytes(F.toPath()));
                rSyntaxTextArea_debug.setText(str);
            } catch (IOException ex) {
                Logger.getLogger(ILC_main_form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jList_debug_filesMouseClicked

    private void jButton_checkConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_checkConnActionPerformed

         if (protocol.checkConnection() == true)
         {
            terminalAddStr("Устройство работает!");
         }else{
            terminalAddStr("Нет связи");
         }
    }//GEN-LAST:event_jButton_checkConnActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ILC_main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ILC_main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ILC_main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ILC_main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ILC_main_form().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_debug_gener;
    private javax.swing.ButtonGroup buttonGroup_debug_lib;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton_burst_clear;
    private javax.swing.JButton jButton_burst_read;
    private javax.swing.JButton jButton_burst_set_val;
    private javax.swing.JButton jButton_burst_write;
    private javax.swing.JButton jButton_checkConn;
    private javax.swing.JButton jButton_comConnect;
    private javax.swing.JButton jButton_comDisconnect;
    private javax.swing.JButton jButton_debug_SDcopy;
    private javax.swing.JButton jButton_debug_addFile;
    private javax.swing.JButton jButton_debug_addLibraries;
    private javax.swing.JButton jButton_debug_add_current;
    private javax.swing.JButton jButton_debug_clearList;
    private javax.swing.JButton jButton_debug_compile;
    private javax.swing.JButton jButton_debug_delFile;
    private javax.swing.JButton jButton_debug_libSave;
    private javax.swing.JButton jButton_debug_main;
    private javax.swing.JButton jButton_debug_open;
    private javax.swing.JButton jButton_debug_save;
    private javax.swing.JButton jButton_flashcopy;
    private javax.swing.JButton jButton_read_main_params;
    private javax.swing.JButton jButton_safe_settings;
    private javax.swing.JButton jButton_settings_open;
    private javax.swing.JButton jButton_settings_save;
    private javax.swing.JButton jButton_start_code;
    private javax.swing.JButton jButton_term_send;
    private javax.swing.JButton jButton_terminal_clear;
    private javax.swing.JButton jButton_write_main_params;
    private javax.swing.JComboBox<String> jComboBox__debug_memPlace;
    private javax.swing.JComboBox<String> jComboBox_actions;
    private javax.swing.JComboBox<String> jComboBox_comPort;
    private javax.swing.JComboBox<String> jComboBox_comPortSpeed;
    private javax.swing.JComboBox<String> jComboBox_data_type;
    private javax.swing.JComboBox<String> jComboBox_debug_flashPos;
    private javax.swing.JComboBox<String> jComboBox_debug_libs;
    private javax.swing.JComboBox<String> jComboBox_dev;
    private javax.swing.JComboBox<String> jComboBox_source;
    private javax.swing.JFileChooser jFileChooser_file;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList_debug_files;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel_PD;
    private javax.swing.JPanel jPanel_connect;
    private javax.swing.JPanel jPanel_debug;
    private javax.swing.JPanel jPanel_param_main;
    private javax.swing.JPanel jPanel_script;
    private javax.swing.JPanel jPanel_terminal;
    private javax.swing.JRadioButton jRadioButton_debug_bin;
    private javax.swing.JRadioButton jRadioButton_debug_c;
    private javax.swing.JRadioButton jRadioButton_debug_stdLib;
    private javax.swing.JRadioButton jRadioButton_debug_userLib;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane_tabs;
    private javax.swing.JTable jTable_burst;
    private javax.swing.JTable jTable_main_params;
    private javax.swing.JTextArea jTextArea_term_out;
    private javax.swing.JTextField jTextField_block;
    private javax.swing.JTextField jTextField_count_bytes;
    private javax.swing.JTextField jTextField_offset;
    private javax.swing.JTextField jTextField_page;
    private javax.swing.JTextField jTextField_set_val;
    private javax.swing.JTextField jTextField_term_in;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea rSyntaxTextArea_debug;
    private org.fife.ui.rtextarea.RTextScrollPane rTextScrollPane_debug;
    // End of variables declaration//GEN-END:variables

    //Функция инициализации параметров
    public void ILC_init_params() {
            
        //Настройка таблиц
        mainSettings_table = (DefaultTableModel) jTable_main_params.getModel();
        burst_table = (DefaultTableModel) jTable_burst.getModel();
        jList_debug_files.setModel(debug_List_files);
        jComboBox_debug_libs.setModel(debug_List_libs);

        //Port init
        port = new Serial_port();
        protocol = new ILC_protocol(port);

        //Инициализация списка COM портов
        String[] portNames = SerialPortList.getPortNames();
        jComboBox_comPort.removeAllItems();
        for(int i = 0; i < portNames.length; i++){
            jComboBox_comPort.addItem(portNames[i]);
        }
        
        //Установка настроек порта
        jComboBox_comPort.setSelectedItem(prp_com_name);
        jComboBox_comPortSpeed.setSelectedItem(prp_com_speed);
        jComboBox_comPortSpeed.setSelectedIndex(0);
        
        //Terminal
        rTextScrollPane_debug.setLineNumbersEnabled(true);
        
        //Обновить список
//        File []fList;
//        File F = new File(debug_path+"//Modules");
//        fList = F.listFiles();
//        debug_List_libs.removeAllElements();       
    }

    //Добавить строку в терминал
    public void terminalAddStr(String str) {
        jTextArea_term_out.setText(jTextArea_term_out.getText()+str+"\r\n");
        jTextArea_term_out.setCaretPosition(jTextArea_term_out.getDocument().getLength());
    }   
    
    //Установить текст в терминале
    public void terminalSetStr(String data) {
        jTextArea_term_out.setText(data);
    }
    
    //Найти строку в таблице
    public String find_value_inTable(JTable obj, int col_key, int col_value, String key) {
        String str = null;
        
        for (int i = 0; i < obj.getRowCount(); i++) {
            if (obj.getValueAt(i, col_key).equals(key))
                str = obj.getValueAt(i,col_value).toString();
        }
        
        return str;
    }

    public void clear_byteArr(byte[] data) {
        int len = data.length;
        for (int i=0; i<len;i++) {
            data[i] = 0x00;
        }
    }
            
//    //Считать основные параметры
//    public void read_main_params() {
//        long main_Flash = 0;
//        long addr_inFlash = 0;
//        long addr;
//        int len;
//        int recived_len;
//        byte[] rx_data = new byte[255];
//        String type;
//
//
//        //Поиск адреса в общем пространстве для флешки
//        for (int i = 0; i < jTable_addr_all.getRowCount(); i++) {
//          if (jTable_addr_all.getValueAt(i, 1).equals("IN_ADR_FLASH"))
//            main_Flash = StrHexToLong(jTable_addr_all.getValueAt(i,0).toString());
//        }
//
//        //Поиск адреса на флешке
//        for (int i = 0; i < jTable_addr_flash.getRowCount(); i++) {
//          if (jTable_addr_flash.getValueAt(i, 1).equals("FADR_SETT_START"))
//            addr_inFlash = StrHexToLong(jTable_addr_flash.getValueAt(i,0).toString());
//        }
//
//        addr = main_Flash + addr_inFlash; //Вычисление абсолютного адреса
//
//        //Чтение каждого параметра отдельно
//        for (int i=0; i<jTable_main_params.getRowCount(); i++) {
//
//            len = Integer.parseInt(jTable_main_params.getValueAt(i, 3).toString()); //Определить длину параметра          
//            type = jTable_main_params.getValueAt(i, 2).toString();//Определить тип параметра
//
//            //Очистить буфер
//            clear_byteArr(rx_data);
//            
//            //Читать данные
//            recived_len = Process_data.read_burst(addr, rx_data, len);
//            if (recived_len != -1){
//                terminal_StrOut("Считаны " + jTable_main_params.getValueAt(i, 0).toString());
//                switch (type) {
//                case "uint8_t":
//                    StringBuilder sb_val_uint8 = new StringBuilder();
//                    sb_val_uint8.append(String.format("0x%02X", rx_data[0]));
//                    jTable_main_params.setValueAt(sb_val_uint8.toString(), i, 1);
//                    break;
//                case "uint16_t":
//                    StringBuilder sb_val_uint16 = new StringBuilder();
//                    sb_val_uint16.append(String.format("0x%02X%02X", rx_data[0], rx_data[1]));
//                    jTable_main_params.setValueAt(sb_val_uint16.toString(), i, 1);
//                    break;
//                case "char":
//                    String str = String.valueOf(new String(rx_data).toCharArray(), 0, recived_len);
//                    jTable_main_params.setValueAt(str, i, 1);
//                    break;
//                default:
//                    break;
//                }
//            }
//
//            addr += len;
//        }
//    }

//    //Записать основные параметры
//    public void write_main_params() {
//        long main_Flash = 0;
//        long addr_inFlash = 0;
//        long addr = 0;
//        int len;
//        byte[] tx_data = new byte[255];
//        String type;
//
//        //Поиск адреса в общем пространстве для флешки
//        for (int i = 0; i < jTable_addr_all.getRowCount(); i++) {
//          if (jTable_addr_all.getValueAt(i, 1).equals("IN_ADR_FLASH"))
//            main_Flash = StrHexToLong(jTable_addr_all.getValueAt(i,0).toString());
//        }
//
//        //Поиск адреса на флешке
//        for (int i = 0; i < jTable_addr_flash.getRowCount(); i++) {
//          if (jTable_addr_flash.getValueAt(i, 1).equals("FADR_SETT_START"))
//            addr_inFlash = StrHexToLong(jTable_addr_flash.getValueAt(i,0).toString());
//        }
//
//        addr = main_Flash + addr_inFlash; //Вычисление абсолютного адреса
//
//        //Запись каждого параметра отдельно
//        for (int i=0; i<jTable_main_params.getRowCount(); i++) {
//            len = Integer.parseInt(jTable_main_params.getValueAt(i, 3).toString()); //Определить длину параметра          
//            type = jTable_main_params.getValueAt(i, 2).toString();//Определить тип параметра
//
//            //Очистить буфер
//            clear_byteArr(tx_data);
//            
//            //Запись значений в зависимости от типа
//            switch (type) {
//                case "uint8_t":
//                    tx_data[0] = (byte) StrHexToLong(jTable_main_params.getValueAt(i,1).toString());
//                    break;
//                case "uint16_t":
//                    long value = StrHexToLong(jTable_main_params.getValueAt(i,1).toString());
//                    tx_data[0] = (byte) ((value & 0x00FF00) >> 8);
//                    tx_data[1] = (byte) (value & 0x0000FF);;
//                    break;
//                case "char":
//                    String str = jTable_main_params.getValueAt(i,1).toString();
//                    for (int k=0; k<str.length(); k++) {
//                        tx_data[k] = str.getBytes()[k];
//                    }
//                    for (int k=0; k<len-str.length(); k++) {
//                        tx_data[str.length()+k] = 0x00;
//                    }
//                    break;
//                default:
//                    break;
//            }
//
//            //Записать данные
//            if (Process_data.write_burst(addr, tx_data, len) == 1){
//                jTextArea_term_out.setText(jTextArea_term_out.getText()+"Записаны настройки "+
//                    jTable_main_params.getValueAt(i, 0).toString()+"\n\r");
//            }
//
//            addr += len; //Адрес следующего значения
//        }
//
//    }

//    //Читать массив
//    public void read_data_array() {
//
//        long addr = 0;
//        int len = 0;
//        int recived_len = 0;
//
//
//        //Получить адрес
//        addr = StrHexToLong(jTextField_burst_addr.getText());
//        len = Integer.parseInt(jTextField_burst_count.getText());
//        byte[] rx_data = new byte[len];
//        
//        //Читать данные
//        recived_len = Process_data.read_burst(addr, rx_data, len);
//        if (recived_len != -1){
//            jTextArea_term_out.setText(jTextArea_term_out.getText()+"Считаны данные\n\r");
//            for (int i=0; i<recived_len; i++) {
//                StringBuilder sb_adr = new StringBuilder();
//                sb_adr.append(String.format("0x%04X", i+addr));
//                StringBuilder sb_val = new StringBuilder();
//                sb_val.append(String.format("0x%02X", rx_data[i]));
//                burst_table.addRow(new Object[]{sb_adr.toString(),sb_val.toString(),(char) rx_data[i]});
//            }
//        }
//
//    }
//
//    //Писать массив
//    public void write_data_array() {
//
//        byte value;
//        long addr;
//        int count_bytes;
//        byte[] tx_data = new byte[255];
//
//        //Получить адрес и количество байт
//        addr = StrHexToLong(jTextField_byte_addr.getText().substring(2, jTextField_byte_addr.getText().length()));
//        count_bytes = Integer.parseInt(jTextField_burst_count.getText());
//
//        //Записать массив
//        for (int i=0; i<count_bytes; i++) {
//            value = (byte) StrHexToLong(burst_table.getValueAt(i, 1).toString());
//            tx_data[i] = value;
//        }
//
//        if (Process_data.write_burst(addr,tx_data,count_bytes) == 1) {
//            jTextArea_term_out.setText(jTextArea_term_out.getText()+"Записан массив\n\r");
//        }
//
//    }
    
    public void refrash_COM_list() {
        jComboBox_comPort.removeAllItems();
        String[] portNames = SerialPortList.getPortNames();
        jComboBox_comPort.removeAllItems();
        for(int i = 0; i < portNames.length; i++){
            jComboBox_comPort.addItem(portNames[i]);
        }
    }
        
    //Конвертировать строку HEX в long
    public long StrHexToLong (String str) {
        long value = -1;
        
        if (str != null) {
            String str_adr = str.substring(2, str.length());
            value = Long.parseLong(str_adr,16) & 0xffffff;
        }
        
        return value;
    }

    //Конвертировать long в строку HEX
    public String LongToHexStr(long value, int len) {
        String str_out = null;
        String str_source = "0x";
        StringBuilder sb_val = new StringBuilder();
        
        str_source += "%0"+String.valueOf(len)+"X";
        sb_val.append(String.format(str_source, value));
        str_out = sb_val.toString();
        
        return str_out;
    } 
    
    public static void infoBox(String infoMessage, String titleBar) {
        JOptionPane optionPane = new JOptionPane(infoMessage);
        JDialog dialog = optionPane.createDialog(titleBar);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }

}
